1. Get all the timesheet records by employee id
2. More descriptive naming for repos
3. Inteface Segregation principle - IRepository split by different 
	crud operations for each client to not consume more than needed
4. Don't filter out in retriever, this will be handled by 
	whats given from DB based upon what we ask.
5. Need to change overtime calcs. Hours changes as well as mulitpliers. -- DONE
6. Helpers/Managers/Utilities - do these know what theyre doing?

7. "Here's my last day, give my last 2 weeks of pay" 
	- Don't try to calculate the days and stuff. This can be simplified.
	
8. PayrollService(IRepo repo)
repo.GetWorksheetsForLastTwoWeeks()
Call calculator

9. Get rid of IWorkweek -- DONE

10 - Implement California -- DONE
	- Anything over 40 hours gets 1.5 multiplier
	- Anything over 8 hours a day 1.25
	
11. Read Chapter 1 Strategy Pattern

CaliforniaCalculator.CalculatePay(IEnumerable<Timesheets>, BasePay) : ICalc

Call factory to get back correct calculator -- DONE
- Pass in Texas and get TimeAndOffCalculator()

- Build UI (dont care much about this) but add:
	- Logger for CRUD operations
	
Anytime you get/update pay rate for employee it needs to be logged! (UI side)
-	 Current user logs it: Bryan at this time.

For caching - dont worry about concurrency or anything, just a simple Cache. -- DONE
	- Add decator for this
